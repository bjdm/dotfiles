" General: ---------------------------------------------------------------------
" {{{

"set rtp+=/usr/lib/python3.5/site-packages/powerline/bindings/vim	" start powerline

let mapleader = ','													" set a map leader for more key combos
let g:mapleader = ','

if !has('nvim')
    set ttymouse=xterm2
endif

"TODO find out what this does
set clipboard=unnamedplus

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" code folding settings
set foldmethod=syntax " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by termbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195

" }}}

" Functions: -------------------------------------------------------------------
" {{{

" unescape html {{{
function! HtmlUnEscape()
  silent s/&lt;/</eg
  silent s/&gt;/>/eg
  silent s/&amp;/\&/eg
endfunction
"}}}

nnoremap <silent> <leader>u :call HtmlUnEscape()<cr>

" Function to load my other configuration files {{{
function! s:source_rc(path, ...) abort
  let use_global = get(a:000, 0, !has('vim_starting'))
  let abspath = resolve(expand('~/.dotfiles/nvim/nvim.symlink/rc/' . a:path))
  if !use_global
    execute 'source' fnameescape(abspath)
    return
  endif

  " substitute all 'set' to 'setglobal'
  let content = map(readfile(abspath),
        \ 'substitute(v:val, "^\\W*\\zsset\\ze\\W", "setglobal", "")')
  " create tempfile and source the tempfile
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute printf('source %s', fnameescape(tempfile))
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction"}}}

" Window movement shortcuts {{{
" move to the window in the direction shown, or create a new window
function! WinMove(key) 
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) "we haven't moved
      if (match(a:key,'[h]')) "we're we going left
          silent execute "!tmux select-pane -L &>/dev/null &" | redraw!
      elseif (match(a:key,'[j]')) "we're we going down
          silent execute "!tmux select-pane -D &>/dev/null &" | redraw!
      elseif (match(a:key,'[k]')) "we're we going up
          silent execute "!tmux select-pane -U &>/dev/null &" | redraw!
      elseif (match(a:key,'[l]')) "we're we going right
          silent execute "!tmux select-pane -R &>/dev/null &" | redraw!
      endif
  endif
endfunction
" }}}

" Rename tabs to show tab# and # of viewports {{{
if exists("+showtabline")
	" function to label tabs
	let twds = ['one', 'two']
	function! MyTabLabel(n)
	  let buflist = tabpagebuflist(a:n)
	  let winnr = tabpagewinnr(a:n)
	  return bufname(buflist[winnr - 1])
	  "return get(g:twds, a:n - 1, '[no name]')
	endfunction

	" function to generate tabline
	function! MyTabLine()
	  let s = ''
	  for i in range(tabpagenr('$'))
	    " select the highlighting
	    if i + 1 == tabpagenr()
	      let s .= '%#TabLineSel#'
	    else
	      let s .= '%#TabLine#'
	    endif

	    " set the tab page number (for mouse clicks)
	    let s .= '%' . (i + 1) . 'T'

	    " the label is made by MyTabLabel()
	    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
	  endfor

	  " after the last tab fill with TabLineFill and reset tab page nr
	  let s .= '%#TabLineFill#%T'

	  " right-align the label to close the current tab page
	  if tabpagenr('$') > 1
	    let s .= '%=%#TabLine#%999Xclose'
	  endif

	  return s
	endfunction

endif
" }}}

" }}}

" Plugins: --------------------------------------------------------------------- 
" {{{
"

call s:source_rc('mappings/nvim.vim')

call s:source_rc('plugins.vim')
call s:source_rc('tui_interface.vim')

" Unite settings
"call s:source_rc('plugins/unite.vim')
"call s:source_rc('mappings/unite.vim')

" Denite settings
call s:source_rc('plugins/denite.vim')
call s:source_rc('mappings/denite.vim')
" Neoyank settings
call s:source_rc('plugins/neoyank.vim')

" Neomake settings
call s:source_rc('plugins/neomake.vim')
"call s:source_rc('mappings/neomake.vim')

" Neotags settings
call s:source_rc('plugins/neotags.vim')

" Tagbar settings
call s:source_rc('mappings/tagbar.vim')


" Deoplete settings
call s:source_rc('plugins/deoplete.vim')

" }}}


autocmd Filetype less setlocal ts=2 sts=2 sw=2
autocmd Filetype css setlocal ts=2 sts=2 sw=2
autocmd Filetype scss setlocal ts=2 sts=2 sw=2
autocmd Filetype ts setlocal ts=2 sts=2 sw=2

colorscheme mybox
